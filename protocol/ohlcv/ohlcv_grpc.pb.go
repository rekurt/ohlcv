// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: ohlcv.proto

package ohlcv

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OHLCVServiceClient is the client API for OHLCVService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OHLCVServiceClient interface {
	GenerateMinutesCandle(ctx context.Context, in *GenerateMinuteCandlesRequest, opts ...grpc.CallOption) (*GenerateMinuteCandlesResponse, error)
	GenerateMinutesKlines(ctx context.Context, in *GenerateMinuteKlinesRequest, opts ...grpc.CallOption) (*GenerateMinuteKlinesResponse, error)
	SubscribeDeals(ctx context.Context, in *SubscribeDealsRequest, opts ...grpc.CallOption) (OHLCVService_SubscribeDealsClient, error)
	GetLastTrades(ctx context.Context, in *GetLastTradesRequest, opts ...grpc.CallOption) (*GetLastTradesResponse, error)
	GetTicker(ctx context.Context, in *GetTickerRequest, opts ...grpc.CallOption) (*GetTickerResponse, error)
}

type oHLCVServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOHLCVServiceClient(cc grpc.ClientConnInterface) OHLCVServiceClient {
	return &oHLCVServiceClient{cc}
}

func (c *oHLCVServiceClient) GenerateMinutesCandle(ctx context.Context, in *GenerateMinuteCandlesRequest, opts ...grpc.CallOption) (*GenerateMinuteCandlesResponse, error) {
	out := new(GenerateMinuteCandlesResponse)
	err := c.cc.Invoke(ctx, "/ohlcv.OHLCVService/GenerateMinutesCandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oHLCVServiceClient) GenerateMinutesKlines(ctx context.Context, in *GenerateMinuteKlinesRequest, opts ...grpc.CallOption) (*GenerateMinuteKlinesResponse, error) {
	out := new(GenerateMinuteKlinesResponse)
	err := c.cc.Invoke(ctx, "/ohlcv.OHLCVService/GenerateMinutesKlines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oHLCVServiceClient) SubscribeDeals(ctx context.Context, in *SubscribeDealsRequest, opts ...grpc.CallOption) (OHLCVService_SubscribeDealsClient, error) {
	stream, err := c.cc.NewStream(ctx, &OHLCVService_ServiceDesc.Streams[0], "/ohlcv.OHLCVService/SubscribeDeals", opts...)
	if err != nil {
		return nil, err
	}
	x := &oHLCVServiceSubscribeDealsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OHLCVService_SubscribeDealsClient interface {
	Recv() (*SubscribeDealsResponse, error)
	grpc.ClientStream
}

type oHLCVServiceSubscribeDealsClient struct {
	grpc.ClientStream
}

func (x *oHLCVServiceSubscribeDealsClient) Recv() (*SubscribeDealsResponse, error) {
	m := new(SubscribeDealsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *oHLCVServiceClient) GetLastTrades(ctx context.Context, in *GetLastTradesRequest, opts ...grpc.CallOption) (*GetLastTradesResponse, error) {
	out := new(GetLastTradesResponse)
	err := c.cc.Invoke(ctx, "/ohlcv.OHLCVService/GetLastTrades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oHLCVServiceClient) GetTicker(ctx context.Context, in *GetTickerRequest, opts ...grpc.CallOption) (*GetTickerResponse, error) {
	out := new(GetTickerResponse)
	err := c.cc.Invoke(ctx, "/ohlcv.OHLCVService/GetTicker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OHLCVServiceServer is the server API for OHLCVService service.
// All implementations must embed UnimplementedOHLCVServiceServer
// for forward compatibility
type OHLCVServiceServer interface {
	GenerateMinutesCandle(context.Context, *GenerateMinuteCandlesRequest) (*GenerateMinuteCandlesResponse, error)
	GenerateMinutesKlines(context.Context, *GenerateMinuteKlinesRequest) (*GenerateMinuteKlinesResponse, error)
	SubscribeDeals(*SubscribeDealsRequest, OHLCVService_SubscribeDealsServer) error
	GetLastTrades(context.Context, *GetLastTradesRequest) (*GetLastTradesResponse, error)
	GetTicker(context.Context, *GetTickerRequest) (*GetTickerResponse, error)
	mustEmbedUnimplementedOHLCVServiceServer()
}

// UnimplementedOHLCVServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOHLCVServiceServer struct {
}

func (UnimplementedOHLCVServiceServer) GenerateMinutesCandle(context.Context, *GenerateMinuteCandlesRequest) (*GenerateMinuteCandlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateMinutesCandle not implemented")
}
func (UnimplementedOHLCVServiceServer) GenerateMinutesKlines(context.Context, *GenerateMinuteKlinesRequest) (*GenerateMinuteKlinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateMinutesKlines not implemented")
}
func (UnimplementedOHLCVServiceServer) SubscribeDeals(*SubscribeDealsRequest, OHLCVService_SubscribeDealsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeDeals not implemented")
}
func (UnimplementedOHLCVServiceServer) GetLastTrades(context.Context, *GetLastTradesRequest) (*GetLastTradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastTrades not implemented")
}
func (UnimplementedOHLCVServiceServer) GetTicker(context.Context, *GetTickerRequest) (*GetTickerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicker not implemented")
}
func (UnimplementedOHLCVServiceServer) mustEmbedUnimplementedOHLCVServiceServer() {}

// UnsafeOHLCVServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OHLCVServiceServer will
// result in compilation errors.
type UnsafeOHLCVServiceServer interface {
	mustEmbedUnimplementedOHLCVServiceServer()
}

func RegisterOHLCVServiceServer(s grpc.ServiceRegistrar, srv OHLCVServiceServer) {
	s.RegisterService(&OHLCVService_ServiceDesc, srv)
}

func _OHLCVService_GenerateMinutesCandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateMinuteCandlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OHLCVServiceServer).GenerateMinutesCandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ohlcv.OHLCVService/GenerateMinutesCandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OHLCVServiceServer).GenerateMinutesCandle(ctx, req.(*GenerateMinuteCandlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OHLCVService_GenerateMinutesKlines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateMinuteKlinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OHLCVServiceServer).GenerateMinutesKlines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ohlcv.OHLCVService/GenerateMinutesKlines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OHLCVServiceServer).GenerateMinutesKlines(ctx, req.(*GenerateMinuteKlinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OHLCVService_SubscribeDeals_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeDealsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OHLCVServiceServer).SubscribeDeals(m, &oHLCVServiceSubscribeDealsServer{stream})
}

type OHLCVService_SubscribeDealsServer interface {
	Send(*SubscribeDealsResponse) error
	grpc.ServerStream
}

type oHLCVServiceSubscribeDealsServer struct {
	grpc.ServerStream
}

func (x *oHLCVServiceSubscribeDealsServer) Send(m *SubscribeDealsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OHLCVService_GetLastTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastTradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OHLCVServiceServer).GetLastTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ohlcv.OHLCVService/GetLastTrades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OHLCVServiceServer).GetLastTrades(ctx, req.(*GetLastTradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OHLCVService_GetTicker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTickerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OHLCVServiceServer).GetTicker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ohlcv.OHLCVService/GetTicker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OHLCVServiceServer).GetTicker(ctx, req.(*GetTickerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OHLCVService_ServiceDesc is the grpc.ServiceDesc for OHLCVService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OHLCVService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ohlcv.OHLCVService",
	HandlerType: (*OHLCVServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateMinutesCandle",
			Handler:    _OHLCVService_GenerateMinutesCandle_Handler,
		},
		{
			MethodName: "GenerateMinutesKlines",
			Handler:    _OHLCVService_GenerateMinutesKlines_Handler,
		},
		{
			MethodName: "GetLastTrades",
			Handler:    _OHLCVService_GetLastTrades_Handler,
		},
		{
			MethodName: "GetTicker",
			Handler:    _OHLCVService_GetTicker_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeDeals",
			Handler:       _OHLCVService_SubscribeDeals_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ohlcv.proto",
}
