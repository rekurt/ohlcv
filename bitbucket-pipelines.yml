image: amazonlinux:2.0.20211005.0
clone:
  depth: 1

options:
  docker: true
  size: 2x

definitions:
  services:
    docker:
      memory: 7128

pipelines:
  default:
      - step: &building
          name: Build app
          image:  golang:1.17.11-alpine
          script:
            - apk add git libc-dev git gcc openssh
            - git config --global url."git@bitbucket.org:".insteadOf "https://bitbucket.org/"
            - export GOPRIVATE=bitbucket.org/novatechnologies/
            - export GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
            - export BUILD_DATE=$(date +"%F %T %Z")
            - export GIT_COMMIT=$(git rev-parse HEAD)
            - export CGO_ENABLED=1
            - export GO111MODULE=on
            - go mod tidy -v
            - go build -tags=jsoniter -a -o service cmd/consumer/main.go
          artifacts:
            - service
      - step: &packing_docker
          name: Build docker image
          image: serafinlabs/aws-docker
          script:
              - export BRANCH=`echo $BITBUCKET_BRANCH | sed 'y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/' | sed 's/\//-/g' | cut -c 1-25 | sed 's/_/-/g'`
              - eval $(aws ecr get-login --no-include-email)
              - cp ~/.docker/config.json ./config.json && chmod 666 ./config.json
              - docker run
                -v $BITBUCKET_CLONE_DIR/config.json:/kaniko/.docker/config.json
                -v $BITBUCKET_CLONE_DIR/.:/workspace gcr.io/kaniko-project/executor:latest
                --cache=true
                --cache-copy-layers
                --use-new-run
                --cache-repo="$ECR_PATH"
                --dockerfile /workspace/Dockerfile
                --destination "$ECR_PATH:ohlcv-$BRANCH-$BITBUCKET_BUILD_NUMBER"
                --destination "$ECR_PATH:ohlcv-$BRANCH-latest"
                --destination "$ECR_PATH:ohlcv-${BITBUCKET_COMMIT:0:8}"
                --context dir:///workspace
      - step: &security_scan
          name: scan image
          image: atlassian/default-image:2
          artifacts:
            download: false
          clone:
            enabled: false
          services:
            - docker
          script:
            - export BRANCH=`echo $BITBUCKET_BRANCH | sed 'y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/' | sed 's/\//-/g' | cut -c 1-25 | sed 's/_/-/g'`
            - pipe: aquasecurity/trivy-pipe:1.0.0
              variables:
                imageRef: "$ECR_PATH:ohlcv-$BRANCH-$BITBUCKET_BUILD_NUMBER"
                format: table
                severity: CRITICAL
                exitCode: "0"
                AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION

      - step: &deploy_k8s
          name: deploy k8s
          deployment: Staging
          image: ipiton/helm-deployer:latest
          trigger: 'manual'
          artifacts:
            download: false
          script:
            - export BRANCH=`echo $BITBUCKET_BRANCH | sed 'y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/' | sed 's/\//-/g' | cut -c 1-25 | sed 's/_/-/g'`
            - echo "Deploying $BRANCH"
            - export NAMESPACE=xch-$BRANCH
            - export LAST_BUILD_TIMESTAMP=`date +%s`
            - export KAFKA_TOPIC_PREFIX=$BRANCH
            - if [ -z $BITBUCKET_TAG ]; then
            -   export DEPLOY_MONGODB=true
            -   if [ -z $OHLCV_BRANCH ]; then
            -     export NAMESPACE=xch-$OHLCV_BRANCH
            -     export TAG=ohlcv-$(aws ecr describe-images --repository-name pointpayio-exchange --query 'sort_by(imageDetails,& imagePushedAt)[*].imageTags[0]' --output table | grep "ohlcv-$OHLCV_BRANCH" | tail -n 1 |awk '{print $2}' | cut -d'-' -f 2-)
            -     if [ -z $TAG ]; then export TAG=ohlcv-master-latest; fi
            -   else
            -     export NAMESPACE=xch-$BRANCH
            -     export TAG=TAG=ohlcv-$BRANCH-$BITBUCKET_BUILD_NUMBER
            -  fi
            - else
            -   export DEPLOY_MONGODB=false
            -   export NAMESPACE=xch-production
            -   export TAG=prod-ohlcv-$BITBUCKET_TAG
            - fi
            - echo $KUBE_CONFIG | base64 -d > ./kubernetes/config
            - kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
            - kubectl label namespaces $NAMESPACE stage="$STAGE" lastBuildTimestamp="$LAST_BUILD_TIMESTAMP" project="exchange.pointpay.io" --overwrite=true
            - kubectl kustomize . | kubectl apply -n $NAMESPACE -f -
            - helm dependency build kubernetes/chart
            - helm upgrade --install -n $NAMESPACE ohlcv kubernetes/chart
                --set image.name=$ECR_PATH
                --set image.tag=$TAG
                --set mongodb.enabled=${DEPLOY_MONGODB}
                --set mongodb.auth.rootPassword=${MONGODB_ROOT_PASSWORD}
                --set mongodb.auth.username=${MONGODB_USER}
                --set mongodb.auth.password=${MONGODB_PASSWORD}
                --set mongodb.auth.database=${MONGODB_NAME}


  branches:
    production:
      - step:
          artifacts:
            download: false
          clone:
            enabled: false
          name: 'test to Production'
          script:
            - echo "Your deployment to staging script goes here..."
            - if [ $BITBUCKET_BRANCH != "production" ]; then
            -   echo "$BITBUCKET_BRANCH IS NOT PRODUCTION BRANCH"
            -   exit 1
            - else
            -   echo "deploy to production from tag"
            -   exit 1
            - fi

    master:
      - step: *building
      - step: *packing_docker
      - step: *security_scan
      - step:
          <<: *deploy_k8s
          deployment: Staging-master
          trigger: automatic

    master2:
      - step: *building
      - step: *packing_docker
      - step: *security_scan
      - step:
          <<: *deploy_k8s
          deployment: Staging-master2
          trigger: automatic

  custom:
    stage_ohlcv_deploy: # triggered by exchange repo  #ohlcv option
      - step:
          <<: *deploy_k8s
          trigger: automatic

  tags:
    'v*.*.*':
      - step:
          name: tag docker
          image: serafinlabs/aws-docker
          artifacts:
            download: false
          clone:
            enabled: false
          script:
            - eval $(aws ecr get-login --no-include-email)
            - docker pull $ECR_PATH:ohlcv-${BITBUCKET_COMMIT:0:8}
            - docker tag  $ECR_PATH:ohlcv-${BITBUCKET_COMMIT:0:8} $ECR_PATH:prod-ohlcv-$BITBUCKET_TAG
            - docker push $ECR_PATH:prod-ohlcv-$BITBUCKET_TAG
      - step:
          <<: *deploy_k8s
          deployment: Production
          trigger: manual
