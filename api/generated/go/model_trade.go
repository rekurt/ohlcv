/*
 * PointPay.io Public Spot API (draft)
 *
 * OpenAPI Specifications for the PointPay.io Public Spot API
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type Trade struct {
	Id string `json:"id"`

	Price string `json:"price"`

	Qty string `json:"qty"`

	QuoteQty string `json:"quoteQty"`

	// Trade executed timestamp, as same as `T` in the stream
	Time int64 `json:"time"`

	IsBuyerMaker bool `json:"isBuyerMaker"`

	IsBestMatch bool `json:"isBestMatch"`
}

// AssertTradeRequired checks if the required fields are not zero-ed
func AssertTradeRequired(obj Trade) error {
	elements := map[string]interface{}{
		"id":           obj.Id,
		"price":        obj.Price,
		"qty":          obj.Qty,
		"quoteQty":     obj.QuoteQty,
		"time":         obj.Time,
		"isBuyerMaker": obj.IsBuyerMaker,
		"isBestMatch":  obj.IsBestMatch,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseTradeRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Trade (e.g. [][]Trade), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseTradeRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aTrade, ok := obj.(Trade)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertTradeRequired(aTrade)
	})
}
